{
  "date": "2019-03-20",
  "title": "Building a Serverless React App on Firebase Functions",
  "preview": "This is a step-by-step guide to building your own serverless React app with the practicality afforded by Next.js and the Firebase ecosystem.",
  "slug": "building-a-serverless-react-app-on-firebase-functions",
  "tags": [
    "software",
    "javascript",
    "react"
  ],
  "bodyContent": "![wide: View of the Bernese Alps from Schilthorn. &copy; 2019 John Apostol](hero.jpg)\r\n\r\nThis is a step-by-step guide to building your own serverless React app with the practicality afforded by Next.js and the Firebase ecosystem.\r\n\r\nAfter reading about Next.js’s new serverless mode and attending ServerlessDays ATX, I got the itch to wire up a simple example for a Firebase-flavored serverless app.\r\n\r\n**Read before you proceed: Firebase bundles all of your functions together and doesn’t natively support per-function bundling. A sufficiently large app with many routes may run into scaling issues. [See this comment.](https://github.com/firebase/firebase-tools/issues/1163#issuecomment-472071855)**\r\n\r\nI wrote this all before I found this out so I’m publishing this anyway. Proceed if you dare!\r\n\r\n---\r\n\r\nFirst, let's take a look at our toolbox.\r\n\r\n## Next.js\r\n\r\nIf you’ve ever built a major React app from scratch, you know what config hell it can be. Next.js is an opinionated, fully-featured React framework that gives you sane defaults upfront. Later on, you can customize your .babelrc and webpack config to suit your app’s needs. You can even pre-render your app on the server (or function in our case).\r\n\r\nMost important for our purposes, Next.js features a new serverless mode that’s optimized for cold starts and small function size.\r\n\r\n## Firebase Functions\r\n\r\n*AKA Cloud Functions for Firebase*\r\n\r\nCan’t have serverless functions without a serverless hosting provider. There’s servers running our code somewhere but we want them abstracted away.\r\n\r\nThe Firebase platform is a nice choice, because it can scale with your app’s needs for a data store, authentication, logging (albeit simple), static file hosting, and user file storage. There’s a little bit of a learning curve when integrating with some features but I’ve generally found it simpler to work with when compared to something like AWS.\r\n\r\n*That said, permissions are currently platform-wide with beta support for per-function IAM. Be wary if you’re keen on following the principle of least privilege.*\r\n\r\nThe rest of this post will explain how to set everything up step-by-step. If you’d rather get going with less hand-holding, see this repo instead:\r\n\r\n---\r\n\r\n# From scratch\r\n\r\nFire up your text editor and `mkdir` something fancy, then let’s get started!\r\n\r\nBegin by installing or swapping over to Node.js 8. Use the version of `npm` bundled with that to run these commands.\r\n\r\n1. `npm init`\r\n2. `npm install next react react-dom`",
  "bodyHtml": "<p><img src=\"hero.jpg\" alt=\"wide: View of the Bernese Alps from Schilthorn. © 2019 John Apostol\"></p>\n<p>This is a step-by-step guide to building your own serverless React app with the practicality afforded by Next.js and the Firebase ecosystem.</p>\n<p>After reading about Next.js’s new serverless mode and attending ServerlessDays ATX, I got the itch to wire up a simple example for a Firebase-flavored serverless app.</p>\n<p><strong>Read before you proceed: Firebase bundles all of your functions together and doesn’t natively support per-function bundling. A sufficiently large app with many routes may run into scaling issues. <a href=\"https://github.com/firebase/firebase-tools/issues/1163#issuecomment-472071855\">See this comment.</a></strong></p>\n<p>I wrote this all before I found this out so I’m publishing this anyway. Proceed if you dare!</p>\n<hr>\n<p>First, let's take a look at our toolbox.</p>\n<h2>Next.js</h2>\n<p>If you’ve ever built a major React app from scratch, you know what config hell it can be. Next.js is an opinionated, fully-featured React framework that gives you sane defaults upfront. Later on, you can customize your .babelrc and webpack config to suit your app’s needs. You can even pre-render your app on the server (or function in our case).</p>\n<p>Most important for our purposes, Next.js features a new serverless mode that’s optimized for cold starts and small function size.</p>\n<h2>Firebase Functions</h2>\n<p><em>AKA Cloud Functions for Firebase</em></p>\n<p>Can’t have serverless functions without a serverless hosting provider. There’s servers running our code somewhere but we want them abstracted away.</p>\n<p>The Firebase platform is a nice choice, because it can scale with your app’s needs for a data store, authentication, logging (albeit simple), static file hosting, and user file storage. There’s a little bit of a learning curve when integrating with some features but I’ve generally found it simpler to work with when compared to something like AWS.</p>\n<p><em>That said, permissions are currently platform-wide with beta support for per-function IAM. Be wary if you’re keen on following the principle of least privilege.</em></p>\n<p>The rest of this post will explain how to set everything up step-by-step. If you’d rather get going with less hand-holding, see this repo instead:</p>\n<hr>\n<h1>From scratch</h1>\n<p>Fire up your text editor and <code>mkdir</code> something fancy, then let’s get started!</p>\n<p>Begin by installing or swapping over to Node.js 8. Use the version of <code>npm</code> bundled with that to run these commands.</p>\n<ol>\n<li><code>npm init</code></li>\n<li><code>npm install next react react-dom</code></li>\n</ol>\n",
  "dir": "content",
  "base": "2019-03-20.json",
  "ext": ".json",
  "sourceBase": "2019-03-20.md",
  "sourceExt": ".md"
}